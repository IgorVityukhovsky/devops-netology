Вопрос: Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа; опишите ход своих мыслей, если считаете что она могла бы быть другого типа.

Ответ: 

type cd
cd is a shell builtin

Команда cd внутреннего типа. Это сделано для того, что бы при её вызове не создавался отдельный процесс, который будет выполняться в своей оболочке
Это привело бы к проблемам с путями и завершению этих процессов.



Вопрос: Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? man grep поможет в ответе на этот вопрос.
Ознакомьтесь с документом о других подобных некорректных вариантах использования pipe.

Ответ: 

в мануале строка 87-88
grep <some_string> <some_file> -c 



Вопрос: Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

Ответ: 

pstree -p
родительский процесс systemd



Вопрос: Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?

Ответ: 

Из pts 0:
ls -l \123 2>/dev/pts/1

В pts 1 выведет:
ls: cannot access '123': No such file or directory



Вопрос: Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

Ответ: 

cat 1
Test line in file 1

cat <1 >2
cat 2
Test line in file 1

При этом файл "2" создался




Вопрос: Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Ответ: 

Получится вывести через перенаправление, но наблюдать данные не будем пока не переключимся на эмулятор



Вопрос: Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?

Ответ: 

Команда bash 5>&1 создаст дескриптор 5 и перенаправит его в stdout
Команда echo netology > /proc/$$/fd/5 перенаправит вывод команды в дескриптор 5 и мы увидим netology



Вопрос: Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty?
Напоминаем: по умолчанию через pipe передается только stdout команды слева от | на stdin команды справа.
Это можно сделать, поменяв стандартные потоки местами через промежуточный новый дескриптор, который вы научились создавать в предыдущем вопросе.

Ответ: 

cD 5>&2 2>&1 1>&5 | grep found -c
1

Этой командой мы создали промежуточный файловый дескриптор, перенаправили его в stderr, stderr перенаправили в stdout, его перенаправили
в наш промежуточный дескриптор. Таким образом получилось, что stdout промежуточного файлового дескриптора содержит в себе в том числе
информацию об ошибках


Вопрос: Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?

Ответ: 

Выведет переменные окружения. Так же можно это сделать с помощью env, printenv



Вопрос: Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.

Ответ: 

man proc

/proc/<PID>/cmdline
Этот файл, доступный только для чтения, содержит полную командную строку для процесса, если только процесс не является зомби. В последнем случае
в этом файле ничего нет: то есть чтение этого файла вернет 0 символов

/proc/[pid]/exe
В Linux 2.2 и более поздних версиях этот файл представляет собой символическую ссылку, содержащую фактический путь к выполняемой команде. 



Вопрос: Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

Ответ: 

cat /proc/cpuinfo | grep sse

sse4_2



Вопрос: При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty.
Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:
vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почитайте, почему так происходит, и как изменить поведение.

Ответ: 

При подключении удалённый хост ожидает именно пользователя, а не процесс. С флагом -T псевдотерминал создаётся принудительно



Вопрос: Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую.
Попробуйте сделать это, воспользовавшись reptyr.
Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.

Ответ: 

sudo apt-get install reptyr
sudo apt-get install tmux screen #на выбор
ping ya.ru

в новом терминале:

screen
ps -a #узнаём PID процесса ping
reptyr PID

Если будет ругаться на права, тогда: sudo nano /etc/sysctl.d/10-ptrace.conf #исправить единственное значение на 0
sudo nano /proc/sys/kernel/yama/ptrace_scope #исправить единственное значение на 0


Конкретно с командой ping получилось по следующей инструкции:

Start a long running process, e.g. ping
Background the process with CTRL-Z
Resume the process in the background: bg
Display your running background jobs with jobs -l, this should look like this:
[1]+ 4711 Stopped (signal) top
(The -l in jobs -l makes sure you'll get the PID)
Disown the jobs from the current parent with disown top. After that, jobs will not show the job any more, but ps -a will.
Start your terminal multiplexer of choice, e.g. tmux
Reattach to the backgrounded process: reptyr 4711
Detach your terminal multiplexer (e.g. CTRL-A D) and close ssh
Reconnect ssh, attach to your multiplexer (e.g. tmux attach), rejoice!


Вопрос: sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем,
так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем.
Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file.
Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.


Ответ: 

tee делает вывод и в файл и в stdout 
в данном случае команда получает stdin и запускает запись в файл от sudo, поэтому права на запись будут.
