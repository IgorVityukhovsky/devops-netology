Вопрос:  

Какой системный вызов делает команда cd?
В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится.
Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'.
В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте.
Вам нужно найти тот единственный, который относится именно к cd.
Обратите внимание, что strace выдаёт результат своей работы в поток stderr, а не в stdout.

Ответ:

chdir("/tmp")                           = 0



Вопрос:  

Попробуйте использовать команду file на объекты разных типов на файловой системе. Например:
vagrant@netology1:~$ file /dev/tty
/dev/tty: character special (5/0)
vagrant@netology1:~$ file /dev/sda
/dev/sda: block special (8/0)
vagrant@netology1:~$ file /bin/bash
/bin/bash: ELF 64-bit LSB shared object, x86-64
Используя strace выясните, где находится база данных file на основании которой она делает свои догадки.

Ответ:

openat(AT_FDCWD, "/usr/share/misc/magic.mgc", O_RDONLY) = 3

так же, видимо, ещё пытается искать в профиле и других местах, но не находит

stat("/home/vagrant/.magic.mgc", 0x7ffc73e3dc50) = -1 ENOENT (No such file or directory)
stat("/home/vagrant/.magic", 0x7ffc73e3dc50) = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/magic.mgc", O_RDONLY) = -1 ENOENT (No such file or directory)



Вопрос:  

Предположим, приложение пишет лог в текстовый файл.
Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет.
Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается.
Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла (чтобы освободить место на файловой системе).

Ответ:

echo 'information_for_delete' > file_for_delete
vi file_for_delete
ps -a
1812 pts/0    00:00:00 vi
lsof -p 1812
vi      1812 vagrant    4u   REG  253,0    12288 1311531 /home/vagrant/.file_for_delete.swp
rm .file_for_delete.swp
lsof -p 1812
vi      1812 vagrant    4u   REG  253,0    12288 1311531 /home/vagrant/.file_for_delete.swp (deleted)
echo '' >/proc/1812/fd/4
lsof -p 1812
vi      1812 vagrant    4u   REG  253,0        1 1311531 /home/vagrant/.file_for_delete.swp (deleted)

#Создал файл, открыл его редактором vi
#Узнал PID процесса, удалил файл
#Перенаправил '' в файловый дескриптор
#Size изменился



Вопрос:  

Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?

Ответ:

Ресурсы не занимают, оставляют только запись в процессах



Вопрос:  

В iovisor BCC есть утилита opensnoop:
root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc
На какие файлы вы увидели вызовы группы open за первую секунду работы утилиты? Воспользуйтесь пакетом bpfcc-tools для Ubuntu 20.04.
Дополнительные сведения по установке.

Ответ:

Установка с включенным ВПН sudo apt-get install bpfcc-tools linux-headers-$(uname -r)

vagrant@vagrant:~$ sudo /usr/sbin/opensnoop-bpfcc
PID    COMM               FD ERR PATH
1      systemd            12   0 /proc/600/cgroup
619    irqbalance          6   0 /proc/interrupts
619    irqbalance          6   0 /proc/stat
619    irqbalance          6   0 /proc/irq/20/smp_affinity
619    irqbalance          6   0 /proc/irq/0/smp_affinity
619    irqbalance          6   0 /proc/irq/1/smp_affinity
619    irqbalance          6   0 /proc/irq/8/smp_affinity
619    irqbalance          6   0 /proc/irq/12/smp_affinity
619    irqbalance          6   0 /proc/irq/14/smp_affinity
619    irqbalance          6   0 /proc/irq/15/smp_affinity



Вопрос:  

Какой системный вызов использует uname -a?
Приведите цитату из man по этому системному вызову, где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.

Ответ:

Судя по strace использует uname ()

почему-то по man uname открывается очень короткий мануал, в котором нет такой информации
 
man uname | grep proc
       -p, --processor
              print the processor type (non-portable)

единственное, что нашлось, в том числе и при ручном просмотре. В интернете нашел информацию:
Part of the utsname information is also accessible  via  /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}.



Вопрос:  

Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#
Есть ли смысл использовать в bash &&, если применить set -e?

Ответ:

&& это условный оператор, а значит следующая за ним команда будет выполняться, только при условии, что предыдущая выполнилась успешно
В отличии от символа ; который является просто разделителем.
Так как в системе нет директории, которая называется /tmp/some_dir, то во втором случае Hi не напишется.

Смысла применять set -e  в сочетании с && нет, так как по сути выполняется аналогичный функционал



Вопрос:  

Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?

Ответ:

Параметр set -e предписывает bash немедленно завершить работу, если какая-либо команда [1] имеет ненулевой статус завершения
Параметр set -x включает режим командной оболочки, в котором все выполняемые команды выводятся на терминал.
Параметр set -u влияет на переменные. При установке ссылка на любую переменную, которую вы ранее не определили,
за исключением of*and@, является ошибкой и приводит к немедленному завершению программы
Параметр set -o pipefail Этот параметр предотвращает маскировку ошибок в конвейере.
Если какая-либо команда в конвейере завершается неудачей, этот код возврата будет использоваться в качестве кода возврата всего конвейера



Вопрос:  

Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе.
В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов.
Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).

Ответ:


ps -o stat

STAT
Ss #S - прерываемый сон (ожидание наступления события) s - лидер сессии
R+ #R - запущенный или доступный для выполнения (в очереди выполнения)  + находится в группе процессов переднего плана




